/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  makeContractCreator,
  getOutput,
  getInput
} from "./utils/makeContractCreator";

import loanProposalsModule from "./abi/loanProposalsModule";

export const createLoanProposalsModule = makeContractCreator(
  loanProposalsModule as any[],
  {
    callMethods: {
      BORROWER_COLLATERAL_TO_FULL_COLLATERAL_MULTIPLIER: {
        output: getOutput("uinteger")
      },

      BORROWER_COLLATERAL_TO_FULL_COLLATERAL_RATIO: {
        output: getOutput("uinteger")
      },

      COLLATERAL_TO_DEBT_RATIO: {
        output: getOutput("uinteger")
      },

      COLLATERAL_TO_DEBT_RATIO_MULTIPLIER: {
        output: getOutput("uinteger")
      },

      MODULE_ACCESS: {
        output: getOutput("string")
      },

      MODULE_CDAI: {
        output: getOutput("string")
      },

      MODULE_CURVE: {
        output: getOutput("string")
      },

      MODULE_DEFI: {
        output: getOutput("string")
      },

      MODULE_FUNDS: {
        output: getOutput("string")
      },

      MODULE_LIQUIDITY: {
        output: getOutput("string")
      },

      MODULE_LOAN: {
        output: getOutput("string")
      },

      MODULE_LOAN_LIMTS: {
        output: getOutput("string")
      },

      MODULE_LOAN_PROPOSALS: {
        output: getOutput("string")
      },

      MODULE_LTOKEN: {
        output: getOutput("string")
      },

      MODULE_PTOKEN: {
        output: getOutput("string")
      },

      PLEDGE_PERCENT_MULTIPLIER: {
        output: getOutput("uinteger")
      },

      debtProposals: {
        inputs: [getInput("", "address"), getInput("", "uinteger")],
        output: getOutput([
          "uinteger",
          "uinteger",
          "bytes",
          "uinteger",
          "uinteger",
          "uinteger",
          "boolean"
        ] as const)
      },

      getModuleAddress: {
        inputs: [getInput("module", "string")],
        output: getOutput("address")
      },

      isOwner: {
        output: getOutput("boolean")
      },

      openProposals: {
        inputs: [getInput("", "address")],
        output: getOutput("uinteger")
      },

      owner: {
        output: getOutput("address")
      },

      pool: {
        output: getOutput("address")
      },

      getProposalAndPledgeInfo: {
        inputs: [
          getInput("borrower", "address"),
          getInput("proposal", "uinteger"),
          getInput("supporter", "address")
        ],
        output: getOutput([
          "uinteger",
          "uinteger",
          "uinteger",
          "uinteger",
          "uinteger",
          "uinteger"
        ] as const)
      },

      getProposalInterestRate: {
        inputs: [
          getInput("borrower", "address"),
          getInput("proposal", "uinteger")
        ],
        output: getOutput("uinteger")
      },

      getRequiredPledge: {
        inputs: [
          getInput("borrower", "address"),
          getInput("proposal", "uinteger")
        ],
        output: getOutput("uinteger")
      },

      getPledgeRequirements: {
        inputs: [
          getInput("borrower", "address"),
          getInput("proposal", "uinteger")
        ],
        output: getOutput(["uinteger", "uinteger"] as const)
      },

      totalLProposals: {
        output: getOutput("uinteger")
      }
    },
    sendMethods: {
      renounceOwnership: {
        output: getOutput("void")
      },

      setPool: {
        inputs: [getInput("_pool", "address")],
        output: getOutput("void")
      },

      transferOwnership: {
        inputs: [getInput("newOwner", "address")],
        output: getOutput("void")
      },

      initialize: {
        inputs: [getInput("_pool", "address")],
        output: getOutput("void")
      },

      createDebtProposal: {
        inputs: [
          getInput("debtLAmount", "uinteger"),
          getInput("interest", "uinteger"),
          getInput("pAmountMax", "uinteger"),
          getInput("descriptionHash", "bytes")
        ],
        output: getOutput("uinteger")
      },

      addPledge: {
        inputs: [
          getInput("borrower", "address"),
          getInput("proposal", "uinteger"),
          getInput("pAmount", "uinteger"),
          getInput("lAmountMin", "uinteger")
        ],
        output: getOutput("void")
      },

      withdrawPledge: {
        inputs: [
          getInput("borrower", "address"),
          getInput("proposal", "uinteger"),
          getInput("pAmount", "uinteger")
        ],
        output: getOutput("void")
      },

      cancelDebtProposal: {
        inputs: [getInput("proposal", "uinteger")],
        output: getOutput("void")
      },

      executeDebtProposal: {
        inputs: [getInput("proposal", "uinteger")],
        output: getOutput("uinteger")
      }
    },
    events: {
      DebtProposalCanceled: {
        inputs: [
          getInput("sender", "address"),
          getInput("proposal", "uinteger")
        ]
      },

      DebtProposalCreated: {
        inputs: [
          getInput("sender", "address"),
          getInput("proposal", "uinteger"),
          getInput("lAmount", "uinteger"),
          getInput("interest", "uinteger"),
          getInput("descriptionHash", "bytes")
        ]
      },

      DebtProposalExecuted: {
        inputs: [
          getInput("sender", "address"),
          getInput("proposal", "uinteger"),
          getInput("debt", "uinteger"),
          getInput("lAmount", "uinteger")
        ]
      },

      OwnershipTransferred: {
        inputs: [
          getInput("previousOwner", "address"),
          getInput("newOwner", "address")
        ]
      },

      PledgeAdded: {
        inputs: [
          getInput("sender", "address"),
          getInput("borrower", "address"),
          getInput("proposal", "uinteger"),
          getInput("lAmount", "uinteger"),
          getInput("pAmount", "uinteger")
        ]
      },

      PledgeWithdrawn: {
        inputs: [
          getInput("sender", "address"),
          getInput("borrower", "address"),
          getInput("proposal", "uinteger"),
          getInput("lAmount", "uinteger"),
          getInput("pAmount", "uinteger")
        ]
      },

      PoolAddressChanged: {
        inputs: [getInput("newPool", "address")]
      }
    }
  } as const
);
