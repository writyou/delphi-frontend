/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  makeContractCreator,
  getOutput,
  getInput
} from "./utils/makeContractCreator";

import pToken from "./abi/pToken";

export const createPToken = makeContractCreator(
  pToken as any[],
  {
    callMethods: {
      DISTRIBUTION_AGGREGATION_PERIOD: {
        output: getOutput("uinteger")
      },

      MODULE_ACCESS: {
        output: getOutput("string")
      },

      MODULE_CDAI: {
        output: getOutput("string")
      },

      MODULE_CURVE: {
        output: getOutput("string")
      },

      MODULE_DEFI: {
        output: getOutput("string")
      },

      MODULE_FUNDS: {
        output: getOutput("string")
      },

      MODULE_LIQUIDITY: {
        output: getOutput("string")
      },

      MODULE_LOAN: {
        output: getOutput("string")
      },

      MODULE_LOAN_LIMTS: {
        output: getOutput("string")
      },

      MODULE_LOAN_PROPOSALS: {
        output: getOutput("string")
      },

      MODULE_LTOKEN: {
        output: getOutput("string")
      },

      MODULE_PTOKEN: {
        output: getOutput("string")
      },

      allowance: {
        inputs: [getInput("owner", "address"), getInput("spender", "address")],
        output: getOutput("uinteger")
      },

      balanceOf: {
        inputs: [getInput("account", "address")],
        output: getOutput("uinteger")
      },

      calculateDistributedAmount: {
        inputs: [
          getInput("fromDistribution", "uinteger"),
          getInput("toDistribution", "uinteger"),
          getInput("initialBalance", "uinteger")
        ],
        output: getOutput("uinteger")
      },

      calculateUnclaimedDistributions: {
        inputs: [getInput("account", "address")],
        output: getOutput("uinteger")
      },

      decimals: {
        output: getOutput("uinteger")
      },

      distributionAccumulator: {
        output: getOutput("uinteger")
      },

      distributions: {
        inputs: [getInput("", "uinteger")],
        output: getOutput(["uinteger", "uinteger"] as const)
      },

      fullBalanceOf: {
        inputs: [getInput("account", "address")],
        output: getOutput("uinteger")
      },

      getModuleAddress: {
        inputs: [getInput("module", "string")],
        output: getOutput("address")
      },

      isMinter: {
        inputs: [getInput("account", "address")],
        output: getOutput("boolean")
      },

      isOwner: {
        output: getOutput("boolean")
      },

      name: {
        output: getOutput("string")
      },

      nextDistribution: {
        output: getOutput("uinteger")
      },

      nextDistributionTimestamp: {
        output: getOutput("uinteger")
      },

      nextDistributions: {
        inputs: [getInput("", "address")],
        output: getOutput("uinteger")
      },

      owner: {
        output: getOutput("address")
      },

      pool: {
        output: getOutput("address")
      },

      symbol: {
        output: getOutput("string")
      },

      totalSupply: {
        output: getOutput("uinteger")
      },

      distributionBalanceOf: {
        inputs: [getInput("account", "address")],
        output: getOutput("uinteger")
      },

      distributionTotalSupply: {
        output: getOutput("uinteger")
      }
    },
    sendMethods: {
      addMinter: {
        inputs: [getInput("account", "address")],
        output: getOutput("void")
      },

      approve: {
        inputs: [
          getInput("spender", "address"),
          getInput("amount", "uinteger")
        ],
        output: getOutput("boolean")
      },

      burn: {
        inputs: [getInput("amount", "uinteger")],
        output: getOutput("void")
      },

      claimDistributions: {
        inputs: [getInput("account", "address")],
        output: getOutput("uinteger")
      },

      createDistribution: {
        output: getOutput("void")
      },

      decreaseAllowance: {
        inputs: [
          getInput("spender", "address"),
          getInput("subtractedValue", "uinteger")
        ],
        output: getOutput("boolean")
      },

      distribute: {
        inputs: [getInput("amount", "uinteger")],
        output: getOutput("void")
      },

      increaseAllowance: {
        inputs: [
          getInput("spender", "address"),
          getInput("addedValue", "uinteger")
        ],
        output: getOutput("boolean")
      },

      mint: {
        inputs: [
          getInput("account", "address"),
          getInput("amount", "uinteger")
        ],
        output: getOutput("boolean")
      },

      renounceMinter: {
        output: getOutput("void")
      },

      renounceOwnership: {
        output: getOutput("void")
      },

      setPool: {
        inputs: [getInput("_pool", "address")],
        output: getOutput("void")
      },

      transferOwnership: {
        inputs: [getInput("newOwner", "address")],
        output: getOutput("void")
      },

      initialize: {
        inputs: [
          getInput("name", "string"),
          getInput("symbol", "string"),
          getInput("decimals", "uinteger")
        ],
        output: getOutput("void")
      },

      transfer: {
        inputs: [getInput("to", "address"), getInput("value", "uinteger")],
        output: getOutput("boolean")
      },

      transferFrom: {
        inputs: [
          getInput("from", "address"),
          getInput("to", "address"),
          getInput("value", "uinteger")
        ],
        output: getOutput("boolean")
      },

      burnFrom: {
        inputs: [
          getInput("account", "address"),
          getInput("amount", "uinteger")
        ],
        output: getOutput("void")
      }
    },
    events: {
      Approval: {
        inputs: [
          getInput("owner", "address"),
          getInput("spender", "address"),
          getInput("value", "uinteger")
        ]
      },

      DistributionAccumulatorIncreased: {
        inputs: [getInput("amount", "uinteger")]
      },

      DistributionCreated: {
        inputs: [
          getInput("amount", "uinteger"),
          getInput("totalSupply", "uinteger")
        ]
      },

      DistributionsClaimed: {
        inputs: [
          getInput("account", "address"),
          getInput("amount", "uinteger"),
          getInput("fromDistribution", "uinteger"),
          getInput("toDistribution", "uinteger")
        ]
      },

      MinterAdded: {
        inputs: [getInput("account", "address")]
      },

      MinterRemoved: {
        inputs: [getInput("account", "address")]
      },

      OwnershipTransferred: {
        inputs: [
          getInput("previousOwner", "address"),
          getInput("newOwner", "address")
        ]
      },

      PoolAddressChanged: {
        inputs: [getInput("newPool", "address")]
      },

      Transfer: {
        inputs: [
          getInput("from", "address"),
          getInput("to", "address"),
          getInput("value", "uinteger")
        ]
      }
    }
  } as const
);
