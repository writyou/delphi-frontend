/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  makeContractCreator,
  getOutput,
  getInput
} from "./utils/makeContractCreator";

import curveModule from "./abi/curveModule";

export const createCurveModule = makeContractCreator(
  curveModule as any[],
  {
    callMethods: {
      MODULE_ACCESS: {
        output: getOutput("string")
      },

      MODULE_CDAI: {
        output: getOutput("string")
      },

      MODULE_CURVE: {
        output: getOutput("string")
      },

      MODULE_DEFI: {
        output: getOutput("string")
      },

      MODULE_FUNDS: {
        output: getOutput("string")
      },

      MODULE_LIQUIDITY: {
        output: getOutput("string")
      },

      MODULE_LOAN: {
        output: getOutput("string")
      },

      MODULE_LOAN_LIMTS: {
        output: getOutput("string")
      },

      MODULE_LOAN_PROPOSALS: {
        output: getOutput("string")
      },

      MODULE_LTOKEN: {
        output: getOutput("string")
      },

      MODULE_PTOKEN: {
        output: getOutput("string")
      },

      PERCENT_DIVIDER: {
        output: getOutput("uinteger")
      },

      calculateEnter: {
        inputs: [
          getInput("liquidAssets", "uinteger"),
          getInput("debtCommitments", "uinteger"),
          getInput("lAmount", "uinteger")
        ],
        output: getOutput("uinteger")
      },

      calculateExit: {
        inputs: [
          getInput("liquidAssets", "uinteger"),
          getInput("lAmount", "uinteger")
        ],
        output: getOutput("uinteger")
      },

      calculateExitInverse: {
        inputs: [
          getInput("liquidAssets", "uinteger"),
          getInput("pAmount", "uinteger")
        ],
        output: getOutput("uinteger")
      },

      curveA: {
        output: getOutput("uinteger")
      },

      curveB: {
        output: getOutput("uinteger")
      },

      curveFunction: {
        inputs: [getInput("s", "uinteger")],
        output: getOutput("uinteger")
      },

      getModuleAddress: {
        inputs: [getInput("module", "string")],
        output: getOutput("address")
      },

      inverseCurveFunction: {
        inputs: [getInput("x", "uinteger")],
        output: getOutput("uinteger")
      },

      isOwner: {
        output: getOutput("boolean")
      },

      owner: {
        output: getOutput("address")
      },

      pool: {
        output: getOutput("address")
      },

      withdrawFeePercent: {
        output: getOutput("uinteger")
      },

      calculateExitInverseWithFee: {
        inputs: [
          getInput("liquidAssets", "uinteger"),
          getInput("pAmount", "uinteger")
        ],
        output: getOutput(["uinteger", "uinteger", "uinteger"] as const)
      },

      calculateExitWithFee: {
        inputs: [
          getInput("liquidAssets", "uinteger"),
          getInput("lAmount", "uinteger")
        ],
        output: getOutput("uinteger")
      },

      calculateExitFee: {
        inputs: [getInput("lAmount", "uinteger")],
        output: getOutput("uinteger")
      }
    },
    sendMethods: {
      renounceOwnership: {
        output: getOutput("void")
      },

      setPool: {
        inputs: [getInput("_pool", "address")],
        output: getOutput("void")
      },

      transferOwnership: {
        inputs: [getInput("newOwner", "address")],
        output: getOutput("void")
      },

      initialize: {
        output: getOutput("void")
      },

      setWithdrawFee: {
        inputs: [getInput("_withdrawFeePercent", "uinteger")],
        output: getOutput("void")
      },

      setCurveParams: {
        inputs: [
          getInput("_curveA", "uinteger"),
          getInput("_curveB", "uinteger")
        ],
        output: getOutput("void")
      }
    },
    events: {
      OwnershipTransferred: {
        inputs: [
          getInput("previousOwner", "address"),
          getInput("newOwner", "address")
        ]
      },

      PoolAddressChanged: {
        inputs: [getInput("newPool", "address")]
      }
    }
  } as const
);
